TIL Daily Log

January 2023

1.1 - Concept: Spread syntax (...), Language/Framework: JavaScript

TIL... The spread syntax (...) expression, introduced in ES6, allows you to "expand" an iterable, such as an array or string, into its individual elements in places where zero or more arguments (for function calls) or elements (for array literals) are expected. For object literals, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created. (MDN)

function fullBirbName(x, y) {
    return x + " " + y;
}

const grayCatbird = ["Gray", "Catbird"];

console.log(fullBirbName(...grayCatbird));
// expected output: Gray Catbird
// without spread syntax, the expect output would be: Gray,Catbird undefined

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

Additional reading

freeCodeCamp - https://www.freecodecamp.org/news/an-introduction-to-spread-syntax-in-javascript-fba39595922c/


1.2 - Concept: Iterating over an object's properties wit a for...in loop, Language/Framework: JavaScript

TIL... You can use a for...in loop to iterate over an object and perform operation the object's property names and corresponding values. (MDN)

const carolinaWren = { "Common name": "Carolina Wren", "Binomial name": "Thryothorus ludovicianus", "Family": "Wrens", "Habitat": "Dense forest, farm edges, and suburban areas" };

for (const property in carolinaWren) {
    console.log(`${property}: ${carolinaWren[property]}`);
}
/* expected output:
    Common name: Carolina Wren
    Binomial name: Thyrothorus ludovicianus
    Family: Wrens
    Habitat: Dense forest, farm edges, and suburban areas
*/

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in


1.3 - Concept: Calculating the sum of an array using the forEach() method, Language/Framework: JavaScript

TIL... You can use the JavaScript forEach() method to find the sum of an array with numbers. The arr.forEach() method will call the provided function once for each element of the array. (GeeksforGeeks)

let triangleSides = [1, 1, 1];

function trianglePerimeter(arr) {
    let sum = 0;
    arr.forEach(x => {
        sum += x;
    })
    return sum;
}

console.log(trianglePerimeter(triangleSides));
// expected output: 3

Reference(s):

GeeksforGeeks - https://www.geeksforgeeks.org/how-to-find-the-sum-of-all-elements-of-a-given-array-in-javascript/


1.6 - Concept: Array.prototype.reduce(), Language/Framework: JavaScript

TIL... The reduce() method will execute a "reducer" callback function on each element of the array, much like the forEach() method. This iterative method will start at the array's first index and will accumulate the return value from the calculation over all the elements of the array in ascending-index order.

Syntax: 
    reduce((accumulator, currentValue) => {}) or
    reduce(callbackFn/accumulator, initial value)

callbackFn: the function executed on each element in the array; it's return value becomes the value of the "accumulator" on the next invocation of callbackFn. On the last invocation, you get the return value of reduce().

accumulator: the value resulting from the previous call to callbackFn; if initalValue is specified, that will be accumulator on first call, otherwise it will be array[0].

currentValue: the value of the current element; the value of array[0] on first call if initialValue is specified, otherwise it's the value of array[1].

currentIndex: the index position of currentValue; 0 if initialValue is specified, otherwise it is 1. (MDN)

If we use the same example from 1.3.23, we can refactor the code to look like this:

const triangleSides = [1, 1, 1];

// 0 + 1 + 1 + 1
const initialValue = 0;
const trianglePerimeter = triangleSides.reduce(
    (accumulator, currentValue) => accumulator + currentValue,
    initialValue
);

console.log(trianglePerimeter);
// expected output: 3

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce


1.14 - Concept: Enclosing scope context for arrow functions, Language/Framework: JavaScript

TIL... Arrow functions do not have their own "execution context" which means that both 'this' and 'arguments' are inherited from their parent function. (Zendev)

For instance:

const test = {
  name: 'test object',
  createAnonFunction: function() {
    return function() {
      console.log(this.name);
      console.log(arguments);
    };
  },

  createArrowFunction: function() {
    return () => {
      console.log(this.name);
      console.log(arguments);
    };
  }
};

const anon = test.createAnonFunction('hello', 'world');
const arrow = test.createArrowFunction('hello', 'world');

> anon();
undefined
{}

> arrow();
test object
{ '0': 'hello', '1': 'world' }

The anonymous function has its own function context, therefore there is no reference available to the 'this.name' of the test object or the arguments being called.

The arrow function has the exact same function contest as the function that created it. It has access to both the arguments being called and the test object.

Reference(s):

Zendev - https://zendev.com/2018/10/01/javascript-arrow-functions-how-why-when.html


1.15 - Concept: Using arrow function expressions as methods, Language/Framework: JavaScript

TIL... You cannot use arrow function expressions as methods.

Arrow functions work differently compared to regular functions. With arrow functions, there are no binding of the keyword 'this'. For regular functions, the 'this' keyword represents the object that called the function. Therefore, for arrow functions, the 'this' keyword ALWAYS represents the object that defined the arrow function.

Watch what happens:

const birbs = {
    a: mockingbird,
    b: () => console.log(this.a, this),
    c() {
        console.log(this.a, this);
    },
};

birbs.b(); // logs undefined, Window { /* ... */ } (or the global object)
birbs.c(); // logs mockingbird, Object {a: 'mockingbird', b: function, c: function}

So what happened here?

A class's body has a 'this' context. Arrow functions, as class fields, will close over, or supersede, the class's this context. The 'this' inside of the arrow functions body will point to the instance, or the class itself for static fields. Because of this closure, the value of 'this' will not change based on the context of the execution and the function's own binding becomes irrelevant.

Reference(s):

w3schools - https://www.w3schools.com/Js/js_arrow_function.asp

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#cannot_be_used_as_methods


1.16 - Concept: Double NOT (!!) & Logical complement/negation, Language/Framework: JavaScript

TIL... The double NOT (!!) operator is the antithesis or direct opposite of the logical NOT (!) operator. The logical NOT (!) operator, also affectionately known as "bang", is typically used with boolean (logical) values and makes them truthy or falsy (true or false) based on their boolean primitive value. Primitive values are the values associated with the predefined data types provided by JavaScript language; also known as "built-in" data types.

While the logical NOT (!) is used with operands that aren't Boolean values, it is still considered to be a boolean operator because its return value can always be converted to a boolean primitive.

not1 = !true // will return false; true is truthy
not2 = !false // will return true; false is falsy
not3 = !'' // will return true; empty strings ('') are falsy
not4 = !'mockingbird' // will return false; strings are truthy

The double NOT (!!) is essentially a function that will explicitily force the conversion of any value to the corresponding boolean primitive.

doubleNot1 = !!true // will return true; true is truthy
doubleNot2 = !!false // will return false; false is falsy
doubleNot3 = !!'' // will return false; empty strings ('') are falsy
doubleNot4 = !!'mockingbird' // will return true; strings are truthy

Another way to use this type of conversion is though the Boolean function:

b1 = Boolean(true) // will return true
b2 = Boolean(false) // will return false
b3 = !Boolean(true) // will return false
b4 = !Boolean(false) // will return true
b5 = !!Boolean(true) // will return true
b6 = !!Boolean(false) // will return false

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion

GeeksforGeeks - https://www.geeksforgeeks.org/primitive-and-non-primitive-data-types-in-javascript/


1.18 - Concept: All objects are truthy -- including empty objects, Language/Framework: JavaScript

TIL... In JavaScript, nearly all objects are instances of 'Object'. Typically, objects will inherit properties and methods from 'Object.prototype'. empty object inherits properties from its prototype 'Object.prototype' as a default. Prototype is a JavaScript property that allows you to add new properties to object constructors. Inheritance in JavaScript refers to the property of objects inheriting, or acquiring, all the properties and behaviors of the parent object.

  * 'Date' objects inherit from 'Date.prototype'
  * 'Array' objects inherit from 'Array.prototype'
  * 'Person' objects inherit from 'Person.prototype'

In essence, the 'Object.prototype' is on the top of the "prototype inheritance food chain"; 'Date', 'Array', and 'Person' objects, for example, all inherit from 'Object.prototype'.

// Object constructor syntax (2 ways):
new Object(value)
Object(value)

'value' is any value.

The constructor input gets turned into into an object. The objects behavior is determined by the input's type. The Object() constructor will return an object of a Type that corresponds to the given value:

const five = new Object(5);
Object.getPrototypeOf(five); // returns Number

If the value being passed into the constructor is an object, it will return the value of the object:

const kingJames = { name: 'LeBron James', age: 38, height: '6 ft 9 in' };
const lilGoat = new Object(kingJames);
console.log(lilGoat); // returns {name: 'LeBron James', age: 38, height: '6 ft 9 in'}

Otherwise, if the value being passed in is 'null' or 'undefined', it creates and return an empty object ({}). It's important to note that both 'null' and 'undefined' are falsy, or not true in a Boolean sense.

// Create an empty object:
const o1 = new Object(); // returns {} - [[Prototype]]: Object
const o2 = Object(); // returns {} - [[Prototype]]: Object

// Undefined an null types as the value being passed in
const o3 = new Object(undefined);
const o4 = Object(undefined);
const o5 = new Object(null);
const o6 = Object(null);

All 6 of these variables will log '{}', an empty object with properties inherited from the 'Object.prototype'.

With that being said, even when Objects are empty, or being constructed without any new properties or methods, or with null and undefined types, they are still truthy. This is because they have inherited properties from 'Object.prototype'.

// Boolean check - wha wha???
const b1 = Boolean(o1); // will return true
const b2 = Boolean(o2); // will return true
const b3 = Boolean(o3); // will return true
const b4 = Boolean(o4); // will return true
const b5 = Boolean(o5); // will return true
const b6 = Boolean(o6); // will return true

TRUUUUUUUUUUUUUUUUUUUUU

Reference(s):

w3schools - https://www.w3schools.com/js/js_object_prototypes.asp

w3schools.blog - https://www.w3schools.blog/inheritance-javascript-js

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object


1.19.23 - Concept: Objects with falsy values are truthy, Language/Framework: JavaScript

TIL... Much like empty objects, objects with only falsy values are truthy due to inheritance from the 'Object.prototype'. "Any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement." (MDN) The same is true whenever an Object with a falsy value is converted to a Boolean or passed into a Boolean object:

const o7 = Object(false);
const o8 = Object(0);
const o9 = Object(-0);
const o10 = Object('');
const o11 = Object(NaN);

const i7 = if (o7) {o7}; // returns Boolean {false}
const i8 = if (o8) {o8}; // returns Boolean {false}
const i9 = if (o9) {o9}; // returns Boolean {false}
const i10 = if (o10) {o10}; // returns Boolean {false}
const i11 = if (o11) {o11}; // returns Boolean {false}

const b7 = Boolean(o7); // returns true
const b8 = Boolean(o8); // returns true
const b9 = Boolean(o9); // returns true
const b10 = Boolean(o10); // returns true
const b11 = Boolean(o11); // returns true

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean

w3schools - https://www.w3schools.com/JS/js_booleans.asp


1.20 - Concept: git pull, Language/Framework: Git

TIL... 'git pull' is a Git command that updates the local version of a repository from a remote. It prompts network interaction by Git.

By default, 'git pull' does two things: 1 - updates the current local working branch (the currently checked out branch), 2 - updates the remote tracking branches for all other branches.

'git pull' fetches ('git fetch') the new commits and merges ('git merge') these into your local branch. (freeCodeCamp)

// Syntax
git pull OPTIONS REPOSITORY REFSPEC // general format
git pull REMOTE-NAME BRANCH-NAME // pull from specified branch

Note: If there are any uncommited changes, the merge function of the 'git pull' command fails and the local branch is untouched. Always commit your changes in a branch before pulling new commits from a remote repository.

Using 'git pull': The 'git pull' command is used to update a local repository from the corresponding remote repository. For example, if you are working on the local 'master', execute 'git pull' to update the local copy of 'master' and update the other remote tracking branches.

Note: The local repository must have a linked remote repository - Check this by executing 'git remote -v'. You may may need to use 'git pull origin' or 'git pull upstream' if more information is needed. The branch you are currently checked out to must have a corresponding remote tracking branch - Check by executing 'git status'. Otherwise, Git doesn't know where to pull information from.

If you are checked out to a 'feature' branch and 'git pull' is executed, when you checkout to 'master', any new updates will not be included. It's always a good idea to execute 'git pull' whenever checking out to another branch.

Reference(s):

freeCodeCamp - https://www.freecodecamp.org/news/git-pull-explained/


1.21.23 - Concept: Conditional (ternary) operator, Language/Framework: JavaScript

TIL... The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression that executes if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as an alternative to an 'if...else' statement. (MDN)

// Syntax
condition ? exprIfTrue : exprIfFalse

// Example
const age = 19;
const beverage = age >= 21 "beer" : "Capri Sun";
console.log(beverage); // Capri Sun

If condition is any falsy expression (false, null, NaN, 0, "", and undefined), the result of the conditional expression will be the execution of the expression expIfFalse. (MDN)

// Handling null values
const greeting = (person) => {
  const name = person ? person.name : "stranger";
  return `Hello, ${name}!`;
}

console.log(greeting({ name: "C'Stanley" })); // Hello, C'Stanley!
console.log(greeting(null)); // Hello, stranger!

Conditional chains:

// Syntax
function example() {
  return condition1 ? value1
        : condition2 ? value2
        : condition3 ? value3
        : value4;
}

While conditional chains are cool, keep it simple to keep your code readable.

Reference(s) & Additional Reading:

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator

PlainEnglish - https://javascript.plainenglish.io/better-javascript-the-ternary-operator-d181338c4c20
             - https://javascript.plainenglish.io/javascript-ternary-operator-b76a02c90850
             - https://javascript.plainenglish.io/how-to-use-ternary-operators-effectively-in-javascript-8c6414551346


1.22.23 - Concept: The JavaScript ?? (nullish coalescing) Operator, Language/Framework: JavaScript

TIL... The JavaScript ?? (nullish coalescing) operator provides a default value when a variable or expression evaluates to null or undefined. (PlainEnglish) MDN defines this operator as "a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand." (MDN)

// Syntax:
leftExpr ?? rightExpr

const foo = null ?? 'default expression';
console.log(foo); // output: "default expression"

const bar = 0 ?? 42;
console.log(bar); // output: 0

One could say that the nullish coalescing operator is a special case of the logical OR (||) operator which returns the right-hand side operand if the left operanad is any falsy value, and is not relegated to only 'null' or 'undefined'. 

The nullish coalescing operator has the fifth-lowest operator precedence, between (||) and the conditional (ternary) operator.

It isn't possible to combine both the AND (&&) and OR operators (||) directly with ??. Syntax errors will be thrown. (MDN)

null || undefined ?? "foo"; // SyntaxError: Unexpected token '??'
true && undefined ?? "foo"; // SyntaxError: Unexpected token '??'

Use parethesis to explicitly indicate precedence:

(null || undefined) ?? "foo"; // returns "foo"
(true && undefined) ?? "foo"; // returns "foo"

Using the nullish coalescing operator:

const nullVoid = null;
const noText = '';
const aNumber = 42;

const value1 = nullVoid ?? 'default for 1';
const value2 = noText ?? 'default for 2';
const value3 = aNumber ?? 0;

console.log(value1); // 'default for 1'
console.log(value2); // '' (empty strings are not null or undefined)
console.log(value3); // 42

A common pattern to assigning a default value to a variable is using the logical OR operator (||):

let foo;
const someText = foo || "Hello!"; // foo is undefined; it never got assigned any value

Since '||' is a boolean logical operator, the left-hand-side operand gets coerced to a boolean for the evaluation. In this case, falsy value do not get returned. This may cause unwanted behavior if you want to consider 0, '', or NaN as valid values.

const count = 0;
const text = '';

const quantity = count || 42;
const message = text || 'Hi!';

console.log(quantity); // 42
console.log(message); // 'Hi!'

When you want to allow falsy values outside of 'null' or 'undefined', the nullish coalescing operator could be a good way to go:

const myText = '';

const nonFalsyText = myText || "Hi y'all!";
console.log(nonFalsyText); // "Hi y'all!"

const preserveFalsy = myText ?? "WAZZUUUP";
console.log(preserveFalsy); // '' (myText isn't undefined or null)

Short-ciruciting

Like the OR and AND logical operators, the right-hand-side expression doesn't get evaluated if the left-hand-side proves to be neither 'null' nor 'undefined'. (MDN)

function A() {
  console.log("function A was called");
  return undefined;
}
function B() {
  console.log("function B was called");
  return false;
}
function C() {
  console.log("function C was called");
  return "foo";
}

console.log(A() ?? C()); // logs "function A was called", "function C was called", "foo"

Here, A() returned 'undefined', therefore both expressions were evaluated. Here's another log:

console.log(B() ?? C()); // logs "function B was called", false

Here, B() returned false (not 'null' or 'undefined'), so the right-hand-side expression doesn't get evaluated.

Reference(s):

PlainEnglish - https://javascript.plainenglish.io/javascript-operator-5d3bd92e835e

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing


1.23.23 - Concept: Optional chaining (?.), Language/Framework: JavaScript

TIL... According to MDN, “The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called is 'undefined' or 'null', it returns 'undefined' instead of throwing an error." (MDN) It enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid. In other words, the optional chaining operator (?.) allows you to check inside an object even if some key-values may not be there. (PlainEnglish)

// Syntax:
obj.val?.prop
obj.val?.[expr]
obj.func?.(args)

The (?.) operator functions like the (.) chaining operator, but "instead of causing an error if a reference is nullish ('null' or 'undefined'), the expression short-circuits with a return value of 'undefined'. When used with function calls, it returns 'undefined' if the given function does not exist." (MDN)

The result is shorter and simpler expressions being used to access chained properties when it's possible that a reference may be missing. (?.) can also be used when exploring the content of an object if there's no known guarantee as to which properties are required. (MDN)

Let's put this into practice. Consider this object:

let albums = { title: 'Jamal Plays Jamal' };

This 'albums' object has a key called 'title' and a string value associated with that key, 'Jamal Plays Jamal'. In order to access the value associated with the 'title' key, you need to name the object and chain it with the name of the key using the (.) chaining operator:

console.log(albums.title); // Jamal Plays Jamal

Simple, right? Let's expand our 'albums' object:

let albums = {
  title: 'Jamal Plays Jamal',
  release: {
    title: 'Maiden Voyage',
    artist: 'Herbie Hancock',
  },
};

The 'albums' object now has two keys:
  * title: The value is the string 'Jamal Plays Jamal'
  * release: The value is another object with two keys - 'title' and 'artist'

In order to get access to the value associated with the 'artist' key, we name the object and chain the name of the keys using the (.) chaining operator:

console.log(albums.release.artist); // Herbie Hancock

This works great when the key we're trying to access is there. But what if it isn't?

console.log(albums.release.artist); // Herbie Hancock
console.log(albums.jazz.title); // TypeError: Cannot read properties of undefined (reading 'title')

We have a breakdown which could cause hiccups in the user experience. Traditionally, the way to avoid this kind of crash is to validate each reference with the logical AND (&&) operator:

console.log(albums.release.artist); // Herbie Hancock
console.log(albums.jazz && albums.jazz.title); // undefined

Though the 'jazz' key doesn't exist, the app doesn't crash. The value of 'albums.jazz' is confirmed to be undefined before ever accessing the value of 'albums.jazz.title'. This is because the logical AND (&&) operator is a short-circuit operator. The first operand, 'albums.jazz' is undefined, or nullish, and falsy, the AND operator stops there and returns 'undefined'.

Objects are often more complex than the above example, therefore checking every reference this way isn't always scalable. Some objects have deeply nested structure. However, with the optional chaining (?.) operator, you don't have to explicitly test and short-circuit using the logical AND (&&) operator before attempting to access the value of a reference. (PlainEnglish)

console.log(albums.release.artist); // Herbie Hancock
console.log(albums.release.title); // Maiden Voyage
console.log(albums.jazz?.title); // undefined

Since we used the (?.) operator, JavaScript will implicitly check albums.jazz not to be 'null' or 'undefined' before attempting to access 'albums.jazz.title'. Since 'albums.jazz' is nullish, the expression automatically short-circuits and returns 'undefined'.

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining

PlainEnglish - https://javascript.plainenglish.io/javascript-optional-chaining-7a2bce30c450


1.24.23 - Concept: Property accessors, Language/Framework: JavaScript

TIL... Property accessor allow you to access an object's properties by using the dot notation or the bracket notation. (MDN)

// Syntax:
object.propertyName
object[expression]

Objects can be thought of associative arrays, much like maps, dictionaries, hashes, and lookup tables. The keys in this type of array are the names of the object's properties which can be accessed with both dot notation and bracket notation. (MDN)

Dot notation

The property name in the 'object.propertyName' syntax must be a valid JavaScript identifier which can also be a reserved word.

const variable = object.propertyName;
object.propertyName = value;

const object = {};
object.$1 = "foo";
console.log(object.$1); // foo

const object = {};
object.1 = "bar";
console.log(object.1); // SyntaxError: Unexpected number

Bracket notation

For the 'object[expression]' syntax, the 'expression' should evaluate to a string or Symbol that represents the property's name. It can be any string literal. (MDN)

const variable = object[propertyName];
object[propertyName] = value;

const key = "name";
const getKey = () => "name";
const Obj = { name: "DOOM" };

Obj["name"]; // 'DOOM'
Obj[key]; // 'DOOM'
Obj[getKey()]; // 'DOOM'

Property names

Property names are string or Symbol. Any other value, including a number, will be coerced to a string.

const object = {};
object["1"] = "value";
console.log(object[1]); // value

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors

1.25.23 - Concept: Short-circuit evaluation, Language/Framework

TIL... As logical expressions are evaluated from left to right, they are tested for possible "short-circuit" evaluation using the following rules:

  * false && anything is short-circuit evaluated to false
  * true || anything is short-circuit evaluated to true

The rules of logic guarantee that these evaluations are always correct. Note, the expression named 'anything' doesn't get evaluated since the first operand evaluates to false. The logical expression gets short-circuited, therefore any side effects that would have come from it being evaluated do not take effect. (MDN)

Let's look at more possible short-circuit evaluations:

// Logical AND Operator (&&)
true && true; // true; both expressions are truthy
true && false; // false; only one expression is truthy
false && true; // false; only one expression is truthy
false && (0 === 1); // false; neither expression is truthy
false && ‘dog’; // false; one expression is falsy
‘dog’ && false; // false; one expression is falsy
‘cat’ && ‘dog’; // dog; both expressions are truthy; && returns first truthy expression

// Logical OR Operator (||)
true || true // true; both operands are truthy, short-circuited
true || false // true; evaluation stops at first truthy operand
false || true // true; evaluation stops at first truthy operand
false || true || false // true; evaluation stops at first truthy operandy
false || false // false; no operand is truthy
0 || 1 // 1; 1 is truthy
1 || 0 // 1; 1 is truthy
0 || 0 // 0; neither operand is truthy
0 || null // null; both operands are falsy
0 || 0 || null // null; all operands are falsy
0 || null || 0 // 0; all operands are falsy
false || ‘cat’ // cat; ‘cat’ is truthy
false || ‘dog’ || null // dog; ‘dog’ is truthy
‘cat’ || ‘dog’ // cat; both operands are truthy, ‘dog’ doesn’t get evaluated

Note: The logical AND operator (&&) takes precedence over the logical OR operator (||) and gets executed before the logical OR operator (||). Otherwise, the first truthy expression or the last falsy expression gets returned. (MDN)

true && true || false // true
true && false || false // false
false && false || true // true
true || true && false // true

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#logical_operators
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR

JavaScript.info - https://javascript.info/logical-operators


1.27.23 - Concept: The arguments object + arguments.length, Language/Framework: JavaScript

TIL... 'arguments' is an Array-like object that is accessible inside functions that contains the values of the arguments passed into that function.

More specifically, it's available within all non-arrow functions. Using the arguments object within a function allows you to access the arguments being passed into that function. It contains within it entries for each argument the function was called with having the first entry's index at 0. (MDN)

arguments[0]; // first argument
arguments[1]; // second argument
arguments[2]; // third argument

And so on.

The arguments object is especially useful for functions that are called with more arguments than they are formally declared to accept. (MDN) These arguments are known as variadic functions, or functions that accept a variable number of arguments. (Wikipedia) You can use 'arguments.length' to count how many arguments the function was called with. You can also inspect the function's length property to count how many parameters a function is declared to accept.

function moreArgs(a, b, ...moreArgs) {
  console.log(arguments[0]);
  console.log(arguments[1]);
  console.log(arguments[2]);
}

moreArgs(1, 2, [3, 4, 5]);
// 1
// 2
// [3, 4, 5];

function howManyArgs(a, b, c) {
  console.log("arguments length: ", arguments.length);
}

howManyArgs(1, 2, 3); // arguments length: 3

function howManyParams(a, b, c, d) {
  return console.log(arguments.length);
}

howManyParams(); // 0
console.log(howManyParams.arguments); // null
console.log(howManyParams.arguments.length); // TypeError: Cannot read properties of null (reading 'length')
console.log(howManyParams.length); // 4

howManyParams(1, 2, 3) // 3

Note: 'arguments.length' works on parameters being passed in. If nothing is being passed in, you end up with a nullish arguments object.

Reference(s):

MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length

Wikipedia - https://en.wikipedia.org/wiki/Variadic_function


1.29.23 - Concept: Strict equality (===) operator, Language/Framework: JavaScript

TIL... 